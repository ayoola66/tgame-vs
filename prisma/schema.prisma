// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String     @id @default(cuid())
  email             String     @unique
  emailVerified     DateTime?
  name              String?
  image             String?
  password          String?
  role              String     @default("USER")
  adminRole         String?    @default("NONE")
  tier              String     @default("FREE")
  subscriptionId    String?
  customMusicUrl    String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  lastLoginAt       DateTime?

  accounts      Account[]
  sessions      Session[]
  gameScores    GameScore[]
  orders        Order[]
  musicUploads  MusicUpload[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  imageUrl    String?
  isActive    Boolean    @default(true)
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  questions   Question[]
  games       Game[]

  @@map("categories")
}

model Question {
  id            String   @id @default(cuid())
  categoryId    String
  question      String
  options       String
  correctAnswer Int
  difficulty    Int      @default(1)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Game {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        String
  imageUrl    String?
  categoryId  String?
  isActive    Boolean    @default(true)
  isPremium   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  category         Category?         @relation(fields: [categoryId], references: [id])
  gameScores       GameScore[]
  questions        GameQuestion[]
  nestedCategories NestedCategory[]

  @@map("games")
}

model GameScore {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  score     Int
  totalTime Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("game_scores")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  category    String
  imageUrl    String?
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id         String   @id @default(cuid())
  userId     String
  status     String   @default("PENDING")
  total      Float
  stripeId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model MusicUpload {
  id        String   @id @default(cuid())
  userId    String
  title     String
  url       String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("music_uploads")
}

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  discount    Float
  validFrom   DateTime
  validUntil  DateTime
  maxUses     Int?
  currentUses Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("coupons")
}

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model GameQuestion {
  id            String   @id @default(cuid())
  gameId        String
  question      String
  options       String
  correctAnswer Int
  order         Int
  points        Int      @default(1)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("game_questions")
}

model NestedCategory {
  id        String   @id @default(cuid())
  gameId    String
  name      String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("nested_categories")
}