import { PrismaClient as DestPrismaClient } from "@prisma/client";
import { PrismaClient as SourcePrismaClient } from "../prisma/generated/sqlite-client/index.js";
import { config } from "dotenv";

config();

// Source (SQLite) database
const sourcePrisma = new SourcePrismaClient();

// Destination (PostgreSQL) database
const destPrisma = new DestPrismaClient();

async function clearDestinationDatabase() {
  console.log("Clearing destination database...");

  // Delete in reverse order of dependencies
  await destPrisma.orderItem.deleteMany();
  await destPrisma.order.deleteMany();
  await destPrisma.product.deleteMany();
  await destPrisma.gameScore.deleteMany();
  await destPrisma.game.deleteMany();
  await destPrisma.question.deleteMany();
  await destPrisma.category.deleteMany();
  await destPrisma.musicUpload.deleteMany();
  await destPrisma.account.deleteMany();
  await destPrisma.session.deleteMany();
  await destPrisma.user.deleteMany();
  await destPrisma.verificationToken.deleteMany();
  await destPrisma.coupon.deleteMany();
  await destPrisma.systemSettings.deleteMany();

  console.log("Destination database cleared successfully!");
}

async function migrateData() {
  try {
    console.log("Starting data migration...");
    console.log("Source database: SQLite");
    console.log("Destination database: PostgreSQL");

    // Clear destination database first
    await clearDestinationDatabase();

    // Migrate Users
    console.log("\nMigrating users...");
    const users = await sourcePrisma.user.findMany({
      include: {
        accounts: true,
        sessions: true,
      },
    });

    for (const user of users) {
      const { accounts, sessions, ...userData } = user;
      await destPrisma.user
        .create({
          data: {
            ...userData,
            accounts: {
              create: accounts || [],
            },
            sessions: {
              create: sessions || [],
            },
          },
        })
        .catch((error) => {
          console.error(`Error migrating user ${user.id}:`, error);
        });
    }
    console.log(`Migrated ${users.length} users`);

    // Migrate Categories
    console.log("\nMigrating categories...");
    const categories = await sourcePrisma.category.findMany();

    for (const category of categories) {
      await destPrisma.category
        .create({
          data: category,
        })
        .catch((error) => {
          console.error(`Error migrating category ${category.id}:`, error);
        });
    }
    console.log(`Migrated ${categories.length} categories`);

    // Migrate Questions
    console.log("\nMigrating questions...");
    const questions = await sourcePrisma.question.findMany();
    for (const question of questions) {
      await destPrisma.question
        .create({
          data: question,
        })
        .catch((error) => {
          console.error(`Error migrating question ${question.id}:`, error);
        });
    }
    console.log(`Migrated ${questions.length} questions`);

    // Migrate Games
    console.log("\nMigrating games...");
    const games = await sourcePrisma.game.findMany();

    for (const game of games) {
      await destPrisma.game
        .create({
          data: game,
        })
        .catch((error) => {
          console.error(`Error migrating game ${game.id}:`, error);
        });
    }
    console.log(`Migrated ${games.length} games`);

    // Migrate Game Scores
    console.log("\nMigrating game scores...");
    const gameScores = await sourcePrisma.gameScore.findMany();
    for (const score of gameScores) {
      await destPrisma.gameScore
        .create({
          data: score,
        })
        .catch((error) => {
          console.error(`Error migrating game score ${score.id}:`, error);
        });
    }
    console.log(`Migrated ${gameScores.length} game scores`);

    // Migrate Products
    console.log("\nMigrating products...");
    const products = await sourcePrisma.product.findMany();
    for (const product of products) {
      await destPrisma.product
        .create({
          data: product,
        })
        .catch((error) => {
          console.error(`Error migrating product ${product.id}:`, error);
        });
    }
    console.log(`Migrated ${products.length} products`);

    // Migrate Orders and Order Items
    console.log("\nMigrating orders and order items...");
    const orders = await sourcePrisma.order.findMany({
      include: {
        orderItems: true,
      },
    });

    for (const order of orders) {
      const { orderItems, ...orderData } = order;
      await destPrisma.order
        .create({
          data: {
            ...orderData,
            orderItems: {
              create: orderItems || [],
            },
          },
        })
        .catch((error) => {
          console.error(`Error migrating order ${order.id}:`, error);
        });
    }
    console.log(`Migrated ${orders.length} orders`);

    // Migrate Music Uploads
    console.log("\nMigrating music uploads...");
    const musicUploads = await sourcePrisma.musicUpload.findMany();
    for (const upload of musicUploads) {
      await destPrisma.musicUpload
        .create({
          data: upload,
        })
        .catch((error) => {
          console.error(`Error migrating music upload ${upload.id}:`, error);
        });
    }
    console.log(`Migrated ${musicUploads.length} music uploads`);

    // Migrate Coupons
    console.log("\nMigrating coupons...");
    const coupons = await sourcePrisma.coupon.findMany();
    for (const coupon of coupons) {
      // Transform coupon data to match new schema
      const { expiresAt, usedCount, ...couponData } = coupon;
      await destPrisma.coupon
        .create({
          data: {
            ...couponData,
            validFrom: new Date(),
            validUntil: expiresAt,
            currentUses: usedCount || 0,
          },
        })
        .catch((error) => {
          console.error(`Error migrating coupon ${coupon.id}:`, error);
        });
    }
    console.log(`Migrated ${coupons.length} coupons`);

    // Migrate System Settings
    console.log("\nMigrating system settings...");
    const systemSettings = await sourcePrisma.systemSettings.findMany();
    for (const setting of systemSettings) {
      await destPrisma.systemSettings
        .create({
          data: setting,
        })
        .catch((error) => {
          console.error(`Error migrating system setting ${setting.id}:`, error);
        });
    }
    console.log(`Migrated ${systemSettings.length} system settings`);

    console.log("\nMigration completed successfully!");
  } catch (error) {
    console.error("Migration failed:", error);
    throw error;
  } finally {
    await sourcePrisma.$disconnect();
    await destPrisma.$disconnect();
  }
}

// Run migration
migrateData().catch((error) => {
  console.error("Migration failed:", error);
  process.exit(1);
});
